// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`useAuthenticatorProps returns the expected values for the confirmResetPassword route 1`] = `
Object {
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "isPending": false,
  "resendCode": [MockFunction],
  "setNavigableRoute": [MockFunction],
  "validationErrors": Object {},
}
`;

exports[`useAuthenticatorProps returns the expected values for the confirmSignIn route 1`] = `
Object {
  "challengeName": "CUSTOM_CHALLENGE",
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "isPending": false,
  "setNavigableRoute": [MockFunction],
  "toSignIn": [MockFunction],
  "user": Object {
    "challengeName": "CUSTOM_CHALLENGE",
  },
}
`;

exports[`useAuthenticatorProps returns the expected values for the confirmSignUp route 1`] = `
Object {
  "codeDeliveryDetails": Object {},
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "isPending": false,
  "resendCode": [MockFunction],
  "setNavigableRoute": [MockFunction],
}
`;

exports[`useAuthenticatorProps returns the expected values for the confirmVerifyUser route 1`] = `
Object {
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "isPending": false,
  "setNavigableRoute": [MockFunction],
  "skipVerification": [MockFunction],
}
`;

exports[`useAuthenticatorProps returns the expected values for the forceNewPassword route 1`] = `
Object {
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "isPending": false,
  "setNavigableRoute": [MockFunction],
  "toSignIn": [MockFunction],
  "validationErrors": Object {},
}
`;

exports[`useAuthenticatorProps returns the expected values for the resetPassword route 1`] = `
Object {
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "isPending": false,
  "setNavigableRoute": [MockFunction],
  "toSignIn": [MockFunction],
}
`;

exports[`useAuthenticatorProps returns the expected values for the setupTOTP route 1`] = `
Object {
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "isPending": false,
  "setNavigableRoute": [MockFunction],
  "toSignIn": [MockFunction],
  "totpSecretCode": null,
}
`;

exports[`useAuthenticatorProps returns the expected values for the signIn route 1`] = `
Object {
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "hideSignUp": false,
  "isPending": false,
  "setNavigableRoute": [MockFunction],
  "toFederatedSignIn": [MockFunction],
  "toResetPassword": [MockFunction],
  "toSignUp": [MockFunction],
}
`;

exports[`useAuthenticatorProps returns the expected values for the signUp route 1`] = `
Object {
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "hideSignIn": false,
  "isPending": false,
  "setNavigableRoute": [MockFunction],
  "toSignIn": [MockFunction],
  "validationErrors": Object {},
}
`;

exports[`useAuthenticatorProps returns the expected values for the verifyUser route 1`] = `
Object {
  "error": "error",
  "handleBlur": [MockFunction],
  "handleChange": [MockFunction],
  "handleSubmit": [MockFunction],
  "isPending": false,
  "setNavigableRoute": [MockFunction],
  "skipVerification": [MockFunction],
}
`;
